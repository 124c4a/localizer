name: CI

on:
  pull_request:

permissions:
  actions: read
  contents: read
  pull-requests: write
  checks: write

jobs:
  main:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - run: npm ci --legacy-peer-deps
      - uses: nrwl/nx-set-shas@v4

      - run: npx nx affected --target=lint --output-file=eslint-report.json --format=json --parallel --maxParallel=4
        continue-on-error: true

      - name: Annotate code linting results
        uses: ataylorme/eslint-annotate-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          report-json: 'packages/**/eslint-report.json'
          markdown-report-on-step-summary: true
          fail-on-error: true
          check-name: 'ESLint results'

      - name: Build
        run: npx nx affected -t build --parallel --maxParallel=4

      - name: Test
        run: npx nx affected -t test --reporter=default --reporter=vitest-sonar-reporter --output-file=sonar-report.xml --coverage

      - name: SonarQube scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Prepare changelog
        run: node scripts/analyze-changes/dist/main.js --baseRef=${{ github.event.pull_request.base.sha }} --headRef=${{ github.event.pull_request.head.sha }}

      - name: Create changelog comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: tmp/CHANGESET.md
          recreate: true

      # Read tmp/CHANGELABEL and update PR labels
      - name: Read change level label
        run: |
          if [ -f tmp/CHANGELEVEL ]; then
            echo "CHANGELEVEL=semver:$(cat tmp/CHANGELEVEL)" >> $GITHUB_ENV
            echo "MODULES=$(cat tmp/MODULES)" >> $GITHUB_ENV
          else
            echo "No changelog label found."
          fi
      - name: Update PR
        if: env.CHANGELEVEL != ''
        uses: actions/github-script@v6
        with:
          script: |
            const label = process.env.CHANGELEVEL;
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            // Remove old labels if needed
            const existingLabels = pullRequest.labels.map(l => l.name);
            for (const existingLabel of existingLabels) {
              if (existingLabel.startsWith('semver:') && existingLabel !== label) {
                await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              name: existingLabel,
                });
              }
            }

            // Add the new label if not already present
            if (!existingLabels.includes(label)) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: [label],
              });
            }

            const ConventionalCommitRegex =
              /(?<type>[a-z]+)(\((?<scope>.+)\))?(?<breaking>!)?: (?<description>.+)/i;

            let metadata;

            const message = github.context.payload.pull_request.title;
            const match = message.match(ConventionalCommitRegex);

            if (!match) {
              metadata = {
                type: 'chore',
                scope: '',
                description: message,
                breaking: false,
              };
            } else {
              metadata = {
                type: match.groups.type || 'chore',
                scope: match.groups.scope || '',
                description: match.groups.description || '',
                breaking: !!match.groups.breaking,
              };
            }

            metadata.scope = process.env.MODULES || metadata.scope;
            metadata.breaking = metadata.breaking || (process.env.CHANGELEVEL === 'major');

            const newTitle = `${metadata.type}${metadata.scope ? `(${metadata.scope})` : ''}${metadata.breaking ? '!' : ''}: ${metadata.description}`;

            if (newTitle !== message) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                title: newTitle,
              });
            }
